@using Nop.Core.Domain.Catalog
@model CheckoutBillingAddressModel

@{
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib/jquery-tmpl/jquery.tmpl.min.js");
}
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address">
            <p class="selector">
                <input asp-for="ShipToSameAddress" />
                <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
            </p>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="section select-billing-address">
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            <div>
                <select name="billing_address_id" id="billing-address-select" class="address-select"
                        title="" onchange="Billing.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                        {
                            addressLine += ", " + address.County;
                        }
                        if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                </select>
            </div>
        </div>
        <div id="invalid-address-container"></div>
        <script id="invalid-address-tmpl" type="text/html">
            <div class="inputs custom-attributes">
                {{if AttributeControlType == @((int)AttributeControlType.TextBox)}}
                <label for="address_attribute_${Id}">${Name}:</label>
                <input type="text" 
                       data-val="true" 
                       data-val-required="${Error}" 
                       id="address_attribute_${Id}" 
                       name="address_attribute_${Id}" 
                       value="${Name}"
                       onchange="(function(event) { console.log(event);})(this)">
                <span class="field-validation-valid" data-valmsg-for="address_attribute_${Id}" data-valmsg-replace="true"></span>
                {{/if}}

                {{if AttributeControlType == @((int)AttributeControlType.DropdownList)}}
                <label>${Name}:</label>
        
                <select name="address_attribute_${Id}" id="address_attribute_3" class="valid" aria-invalid="false">
                    {{each AddressAttributeValues}}
                    <option value="${Id}">${Name}</option>
                    {{/each}}
                </select>
                {{/if}}
            </div>
        </script>
        <script asp-location="Footer">
            $(document).ready(function() {
                $('#billing-address-select').on('change',
                    function() {
                        $.ajax({
                            cache: false,
                            url: '@Url.Action("OpcCheckCustomAttributes", "Checkout")',
                            type: 'get',
                            data: {
                                billingAddressId: $('#billing-address-select').val()
                            }
                        }).done(function (response) {
                            $('#invalid-address-container').empty();
                            $('#invalid-address-tmpl').tmpl(JSON.parse(response)).appendTo($('#invalid-address-container'));
                            console.log($('#address_attribute_1'));
                        });
                    });
            })
        </script>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })
    <div class="section new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })
</div>
